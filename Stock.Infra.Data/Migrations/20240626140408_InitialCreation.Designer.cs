// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Stock.Infra.Data.Context;

#nullable disable

namespace Stock.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240626140408_InitialCreation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Stock.Domain.Entities.Contactos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("contactosid")
                        .HasColumnType("integer");

                    b.Property<string>("usercodigopais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("usertelefone1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("usertelefone2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("usertelefonefixo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("usuarioid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("contactosid");

                    b.HasIndex("usuarioid");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("Stock.Domain.Entities.Localizacao", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("localizacaoid")
                        .HasColumnType("integer");

                    b.Property<string>("userbairro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("usercomuna")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("usernumerocasa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userpais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userprovincia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("usuarioid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("localizacaoid");

                    b.HasIndex("usuarioid");

                    b.ToTable("Localizacao");
                });

            modelBuilder.Entity("Stock.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserFotografiaPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserIdade")
                        .HasColumnType("integer");

                    b.Property<string>("UserNacionalidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserNomeCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserSector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Stock.Domain.Entities.movimentostock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MovimentostockId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("movimento")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("produtoid")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovimentostockId");

                    b.HasIndex("produtoid")
                        .IsUnique();

                    b.ToTable("movimentostocks");
                });

            modelBuilder.Entity("Stock.Domain.Entities.produto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<string>("categoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("preco")
                        .HasColumnType("real");

                    b.Property<string>("produtoFotografia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("produtonome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("quantidade")
                        .HasColumnType("real");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("produto");
                });

            modelBuilder.Entity("Stock.Domain.Entities.Contactos", b =>
                {
                    b.HasOne("Stock.Domain.Entities.Contactos", "contactos")
                        .WithMany()
                        .HasForeignKey("contactosid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stock.Domain.Entities.Usuario", "usuarios")
                        .WithMany("Contactos")
                        .HasForeignKey("usuarioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contactos");

                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("Stock.Domain.Entities.Localizacao", b =>
                {
                    b.HasOne("Stock.Domain.Entities.Localizacao", "localizacao")
                        .WithMany()
                        .HasForeignKey("localizacaoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stock.Domain.Entities.Usuario", "usuario")
                        .WithMany("Localizacao")
                        .HasForeignKey("usuarioid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("localizacao");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Stock.Domain.Entities.movimentostock", b =>
                {
                    b.HasOne("Stock.Domain.Entities.movimentostock", "Movimentostock")
                        .WithMany()
                        .HasForeignKey("MovimentostockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stock.Domain.Entities.produto", "produto")
                        .WithOne("Movimentostock")
                        .HasForeignKey("Stock.Domain.Entities.movimentostock", "produtoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movimentostock");

                    b.Navigation("produto");
                });

            modelBuilder.Entity("Stock.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Contactos");

                    b.Navigation("Localizacao");
                });

            modelBuilder.Entity("Stock.Domain.Entities.produto", b =>
                {
                    b.Navigation("Movimentostock")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
